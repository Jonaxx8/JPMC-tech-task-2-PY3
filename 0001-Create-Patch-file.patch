From 501a31fb4d649b50a1f679b088c88f1ba03ce2c4 Mon Sep 17 00:00:00 2001
From: Nikil Jonnada <20r21a0543@mlrinstitutions.ac.in>
Date: Fri, 29 Jul 2022 19:13:04 +0530
Subject: [PATCH] Create Patch file

---
 src/App.tsx   | 33 +++++++++++++++++++++++++++------
 src/Graph.tsx | 13 +++++++++++--
 2 files changed, 38 insertions(+), 8 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7edfdba 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,14 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import { Server } from 'http';
 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  showGraph : boolean;
 }
 
 /**
@@ -22,6 +24,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,20 +32,37 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if(x>1000){
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
+  //   DataStreamer.getData((serverResponds: ServerRespond[]) => {
+  //     // Update the state by creating a new array of data that consists of
+  //     // Previous data in the state and the new data from server
+  //     this.setState({ data: [...this.state.data, ...serverResponds] });
+  //   });
+  // }
+
   /**
    * Render the App react component
    */
@@ -71,4 +91,5 @@ class App extends Component<{}, IState> {
   }
 }
 
+
 export default App;
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..80b8878 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots','[top_ask_price]');
+      elem.setAttribute('aggregates', `
+      {
+        "stock": "distinct count",
+        "top_bid_price" : "avg",
+        "timestap" : "distinct count"
+      }`);
     }
   }
 
-- 
2.33.1.windows.1

